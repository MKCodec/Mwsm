name: üîÑ Mwsm Version Sync

permissions:
  contents: write
  id-token: write   # Necess√°rio para publica√ß√£o via Trusted Publisher (OIDC)

on:
  push:
    branches: [ main ]
    paths:
      - "fonts/**"
      - "icon.png"
      - "index.html"
      - "jquery.js"
      - "mwsm.db"
      - "mwsm.js"
      - "mwsm.json"
      - "nodemon.json"
      - "package.json"
      - "script.js"
      - "socket.io.js"
      - "style.css"
      - "version.json"
      - "mwsm.py"
  release:
    types: [published, edited]
  workflow_dispatch:

concurrency:
  group: mwsm-version-sync
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    # evita loops criados pelo pr√≥prio bot
    if: ${{ !startsWith(github.event.head_commit.message, 'üîÑ Bot-Mwsm') }}

    steps:
      - name: üß© Checkout do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: main

      - name: ‚öôÔ∏è Instalar utilit√°rios
        run: sudo apt-get update && sudo apt-get install -y jq curl gh

      - name: üìÇ Verificar arquivos modificados
        id: detect
        run: |
          set -euo pipefail
          echo "üìÇ Verificando arquivos modificados..."
          git fetch origin main --no-tags

          # lidar com reposit√≥rio com apenas 1 commit ou em runners onde HEAD^ pode n√£o existir
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || echo "")
          else
            # fallback: usa a lista de arquivos do √∫ltimo commit
            CHANGED_FILES=$(git diff --name-only HEAD || git ls-files)
          fi

          echo "$CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q "mwsm.db"; then
            echo "DB_CHANGED=true" >> "$GITHUB_OUTPUT"
          else
            echo "DB_CHANGED=false" >> "$GITHUB_OUTPUT"
          fi

      - name: üî¢ Atualizar version.json e package.json (sincroniza com √∫ltimo release e calcula incremento)
        id: version
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          set -euo pipefail
          PATCH=$(TZ="America/Sao_Paulo" date +"%Y-%m-%d %H:%M:%S")

          if [ "${GITHUB_EVENT_NAME}" = "release" ]; then
            LATEST_TAG="${GITHUB_REF_NAME:-$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH" 2>/dev/null || true)}"
          else
            LATEST_TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || true)
          fi

          LATEST_TAG=$(echo "$LATEST_TAG" | sed 's/^v//' || true)
          FILE_VER=$(jq -r '.version[0].release // .version // empty' version.json 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            BASE="$LATEST_TAG"
          elif [ -n "$FILE_VER" ]; then
            BASE="$FILE_VER"
          else
            BASE="3.0.0"
          fi

          BASE="$(echo "$BASE" | tr -d '[:space:]')"
          IFS='.' read -r MAJ MIN PAT <<< "$(echo "$BASE")"
          MAJ=${MAJ:-0}; MIN=${MIN:-0}; PAT=${PAT:-0}

          echo "üîç Base de vers√£o: ${MAJ}.${MIN}.${PAT}"

          if [ "${{ steps.detect.outputs.DB_CHANGED }}" = "true" ]; then
            echo "üîº mwsm.db mudou ‚Äî incrementando vers√£o."
            if [ "$PAT" -lt 99 ]; then
              PAT=$((PAT + 1))
            else
              PAT=0
              if [ "$MIN" -lt 99 ]; then
                MIN=$((MIN + 1))
              else
                MIN=0
                MAJ=$((MAJ + 1))
              fi
            fi
          fi

          NEW_VER="${MAJ}.${MIN}.${PAT}"

          jq --arg v "$NEW_VER" --arg d "$PATCH" \
            '.version[0].release=$v | .version[0].patch=$d' version.json > version.tmp && mv version.tmp version.json

          # normaliza o package.json: for√ßa name para 'bot-mwsm' (resolver√° o 403 do npm por case)
          jq --arg v "$NEW_VER" --arg name "bot-mwsm" \
            '.version=$v | .name=$name' package.json > package.tmp && mv package.tmp package.json

          echo "version=$NEW_VER" >> "$GITHUB_OUTPUT"
          echo "patch=$PATCH" >> "$GITHUB_OUTPUT"

      - name: ü™∂ Atualizar badges no README.md
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PATCH="${{ steps.version.outputs.patch }}"
          DATE_BR=$(date -d "$PATCH" +"%d/%m/%Y %H:%M")
          DATE_URL=${DATE_BR//\//%2F}
          DATE_URL=${DATE_URL// /%20}

          sed -i -E "s|https://img.shields.io/badge/Build-[^\" >]*|https://img.shields.io/badge/Build-${VERSION}-blue?style=for-the-badge|gI" README.md
          sed -i -E "s|https://img.shields.io/badge/Update-[^\" >]*|https://img.shields.io/badge/Update-${DATE_URL}-green?style=for-the-badge|gI" README.md

      - name: üíæ Commit e push das altera√ß√µes
        env:
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          set -e
          git config --global user.name "Bot-Mwsm ü§ñ"
          git config --global user.email "143403919+MKCodec@users.noreply.github.com"
          git config --global commit.gpgsign false

          git add README.md package.json version.json || true

          if git diff --cached --quiet; then
            echo "‚úÖ Nenhuma altera√ß√£o detectada ‚Äî nada a commitar."
          else
            git commit -m "üîÑ Bot-Mwsm"
            git push https://x-access-token:${PERSONAL_TOKEN}@github.com/${{ github.repository }}.git main
          fi

      - name: üöÄ Criar release/tag autom√°tica (se banco mudou)
        if: steps.detect.outputs.DB_CHANGED == 'true'
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          gh release create "$TAG" --title "$TAG" --notes "Release autom√°tico do Bot-Mwsm" || echo "‚ö†Ô∏è Release j√° existente ‚Äî ignorando."

      - name: üîÑ Garantir sincronismo antes do publish
        run: |
          git pull origin main --rebase || true
          echo "Vers√£o package.json:" $(jq -r .version package.json)
          echo "Vers√£o version.json:" $(jq -r '.version[0].release // .version' version.json)

      - name: üß© Verificar autentica√ß√£o NPM (OIDC ping)
        run: |
          set -e
          echo "üîç Verificando conectividade com registry (OIDC test via npm ping)..."
          if npm ping >/dev/null 2>&1; then
            echo "‚úÖ npm ping ok (pode usar OIDC se configurado)."
          else
            echo "‚ö†Ô∏è npm ping falhou ‚Äî verifique Trusted Publisher no npmjs.com."
            # n√£o falha aqui; deixamos o publish tentar e fallback por token cuidar do resto
          fi

      - name: ‚öôÔ∏è Setup Node (garante npm atualizado e registry)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: üîç Mostrar vers√µes antes do publish
        run: |
          node --version
          npm --version
          echo "package.json version:" $(jq -r .version package.json)
          echo "version.json release:" $(jq -r '.version[0].release // .version' version.json)

      - name: üì¶ Publicar no NPM (Trusted Publisher - OIDC)
        id: publish_oidc
        continue-on-error: true
        run: |
          set -e
          echo "üì¶ Tentando publicar via OIDC (Trusted Publisher)..."
          VERSION=$(jq -r '.version[0].release // .version' version.json)
          # j√° normalizamos name e version no passo anterior
          jq --arg v "$VERSION" '.version=$v' package.json > package.tmp && mv package.tmp package.json

          # instalar depend√™ncias caso necess√°rio para build (n√£o deve afetar publish)
          npm ci --no-audit --no-fund || true

          PUBLISHED=$(npm view bot-mwsm version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$VERSION" ]; then
            echo "‚ö†Ô∏è Vers√£o $VERSION j√° est√° publicada no npm ‚Äî pulando publish."
            exit 0
          fi

          # publish: se trusted publisher estiver configurado no npm, o runner usar√° OIDC
          npm publish --provenance --access public

      - name: üì¶ Fallback publish via NPM_TOKEN (se OIDC falhar)
        if: ${{ steps.publish_oidc.outcome == 'failure' }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -e
          echo "‚ö†Ô∏è Publica√ß√£o via OIDC falhou ‚Äî tentando fallback com NPM_TOKEN..."
          VERSION=$(jq -r '.version[0].release // .version' version.json)

          if [ -z "${NPM_TOKEN:-}" ]; then
            echo "‚ùå NPM_TOKEN n√£o encontrado nas secrets. Aborting."
            exit 1
          fi

          # configura token para registry
          npm config set //registry.npmjs.org/:_authToken "${NPM_TOKEN}"

          # re-check published just in case
          PUBLISHED=$(npm view bot-mwsm version 2>/dev/null || echo "")
          if [ "$PUBLISHED" = "$VERSION" ]; then
            echo "‚ö†Ô∏è Vers√£o $VERSION j√° publicada (detected after fallback check) ‚Äî nada a fazer."
            exit 0
          fi

          echo "üîÅ Publicando vers√£o $VERSION via token..."
          npm publish --access public || {
            echo "‚ùå Falha total no publish, mesmo com fallback."
            exit 1
          }
          echo "‚úÖ Publica√ß√£o via token conclu√≠da com sucesso!"

      - name: üêã Build & Push Docker Image
        if: steps.detect.outputs.DB_CHANGED == 'true'
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -e
          echo "üêã Iniciando build e push da imagem Docker..."

          VERSION="${{ steps.version.outputs.version }}"
          IMAGE="${DOCKERHUB_USERNAME}/mwsm"

          echo "üîê Fazendo login no Docker Hub..."
          echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

          echo "üèóÔ∏è Construindo imagem ${IMAGE}:${VERSION}..."
          docker buildx create --use --name builder || true
          docker buildx build --platform linux/amd64 \
            -t "${IMAGE}:${VERSION}" \
            -t "${IMAGE}:latest" \
            --push .

          echo "‚úÖ Imagem publicada com sucesso:"
          echo "   üîπ ${IMAGE}:${VERSION}"
          echo "   üîπ ${IMAGE}:latest"
